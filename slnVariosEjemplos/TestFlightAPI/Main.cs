/***************************************************************
    *  DO NOT EDIT THIS FILE!
    *         
    *  This file is automatically generated by HP Service Test.
    *  Manually changing the contents of this file may result in 
    *  loss of information.
    *          
    *  To edit the test, open the file ‘TestFlightAPI.st’ 
    *  in HP Service Test.
     ***************************************************************/
    
    namespace Script
    {
    using System;
    using System.Text;
    using System.Threading;
    using System.Xml;
    using System.Xml.Schema;
    using HP.ST.Fwk.ReporterFWK;
    using HP.ST.Shared.Utilities;
    using HP.ST.Ext.BindingImpl.Getters;
    using HP.ST.Ext.BindingImpl.Setters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.PropInfo;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Getters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Setters;
    using HP.ST.Fwk.RunTimeFWK;
    using HP.ST.Fwk.RunTimeFWK.Utilities;
    using HP.ST.Fwk.RunTimeFWK.HelperClasses;
    using HP.ST.Fwk.RunTimeFWK.CompositeActivities;
    using HP.ST.Ext.BindingImpl.Setters.DataSourceSetters;
    using HP.ST.Fwk.JVMLoader;
    using System.IO;
    using System.Collections.Generic;
    using System.Reflection;
    using HP.ST.Fwk.SOAReplayAPI;
    using HP.ST.Fwk.UFTLicensing;
    
    
    
    public partial class WorkFlowScript : STWorkFlowScriptBase
    {    
    	TestUserCode _userCode = null;
    	TestEntities _flow = null;
    	static Reporter reporter;
    	int reportLevelInTree;
        HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator reportCreator;
    	
    	public BindDirection bind_dir2 = null;
        public BindDirection bind_dir3 = null;
        public BindDirection bind_dir4 = null;
        public BindDirection bind_dir5 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity14 = null;
        public BindDirection bind_dir6 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity14_Policy = null;
        public BindDirection bind_dir7 = null;
        public BindDirection bind_dir8 = null;
        public BindDirection bind_dir9 = null;
        public BindDirection bind_dir10 = null;
        public BindDirection bind_dir11 = null;
        public BindDirection bind_dir12 = null;
        public BindDirection bind_dir13 = null;
        public BindDirection bind_dir14 = null;
        public BindDirection bind_dir15 = null;
        
        public IEnumerable<FeaturesGroup> LicensedFeatures
        {
        
        get
        {
        List<FeaturesGroup> features = new List<FeaturesGroup>();
        return features;
        
        }
        
        }
        
        public WorkFlowScript()
            : base(VuserClass.CommandLineArguments, new STRunTimeContext(), "test")
        {	
        	UpdateContextWithActionFolder(String.Empty);
        	
        }
        
        public WorkFlowScript(ISTRunTimeContext ctx)
            : base(VuserClass.CommandLineArguments, ctx, "test")
            
        {
        	this._context = ctx;
        	UpdateContextWithActionFolder(String.Empty);
        	UpdateTestSettings(ctx);
        }
        
        internal void InitializeComponent()
        {
        	LoadInput();
        	
        	InitReport();
        	
        	InitializeEncryptionManagerValues();
        
        	_userCode = new TestUserCode();
            _flow = _userCode;
            _flow.Context=this._context;
            
            
        
        	_flow.DataFetchActivity10 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity10");
            _flow.DataFetchActivity7 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity7");
            _flow.StartActivity1 = new HP.ST.Ext.BasicActivities.StartActivity(_context,"StartActivity1");
            _flow.Loop2 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop2Input>(_context,"Loop2",LoopType.ForEach);
            _flow.DataExporterActivity9 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity9");
            _flow.DataExporterActivity12 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity12");
            _flow.DataExporterCloseActivity13 = new HP.ST.Ext.BasicActivities.DataExporterCloseActivity(_context,"DataExporterCloseActivity13");
            _flow.EndActivity3 = new HP.ST.Ext.BasicActivities.EndActivity(_context,"EndActivity3");
            _flow.DataDisconnectActivity8 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity8");
            _flow.DataDisconnectActivity11 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity11");
            this.DataCursorActivity14 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity14");
            this.DataCursorActivity14_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.RelatedDataFetchActivity15 = new HP.ST.Ext.BasicActivities.RelatedDataFetchActivity(_context,"RelatedDataFetchActivity15");
            _flow.Sequence6 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence6");
            _flow.ReplaceStringActivity4 = new HP.ST.Ext.BasicActivities.ReplaceStringActivity(_context,"ReplaceStringActivity4");
            _flow.ConcatenateStringsActivity5 = new HP.ST.Ext.BasicActivities.ConcatenateStringsActivity(_context,"ConcatenateStringsActivity5");
            _flow.DataFetchActivity10.Comment = @"";
            _flow.DataFetchActivity10.IconPath = @"";
            _flow.DataFetchActivity10.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity10.QueryClassName = @"HP.ST.Ext.CustomDataProviders.ExcelFileDataQuery";
            XmlDocument DataFetchActivity10_QueryParameters_Document = new XmlDocument();
            DataFetchActivity10_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity10Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>33f9fef4-2191-4419-a8fe-47c2a6aa8713</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>Cambiar Texto_InputPropertiesOutputProperties_1!SearchReplaceString</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value>Cambiar Texto_InputPropertiesOutputProperties_1</Value></QueryParameter><QueryParameter><Name>FilePath</Name><Value>" + _context.ResourceManager.GetValue("{Cambiar Texto_InputPropertiesOutputProperties_1!SearchReplaceString.TablePath}") + "</Value></QueryParameter><QueryParameter><Name>SheetName</Name><Value>SearchReplaceString$</Value></QueryParameter><QueryParameter><Name>ContainsHeadersRow</Name><Value>True</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity10_QueryParameters_Document.LoadXml(xmlDataFetchActivity10Params);
            _flow.DataFetchActivity10.QueryParameters = DataFetchActivity10_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("Cambiar Texto_InputPropertiesOutputProperties_1!SearchReplaceString", _flow.DataFetchActivity10);
            this.Activities.Add (_flow.DataFetchActivity10);
            _flow.DataFetchActivity7.Comment = @"";
            _flow.DataFetchActivity7.IconPath = @"";
            _flow.DataFetchActivity7.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity7.QueryClassName = @"HP.ST.Ext.CustomDataProviders.ExcelFileDataQuery";
            XmlDocument DataFetchActivity7_QueryParameters_Document = new XmlDocument();
            DataFetchActivity7_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity7Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>025b403c-788c-49e8-9b72-fa7da23c772d</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>Cambiar Texto_InputPropertiesOutputProperties_1!MainDetails</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value>Cambiar Texto_InputPropertiesOutputProperties_1</Value></QueryParameter><QueryParameter><Name>FilePath</Name><Value>" + _context.ResourceManager.GetValue("{Cambiar Texto_InputPropertiesOutputProperties_1!MainDetails.TablePath}") + "</Value></QueryParameter><QueryParameter><Name>SheetName</Name><Value>MainDetails$</Value></QueryParameter><QueryParameter><Name>ContainsHeadersRow</Name><Value>True</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity7_QueryParameters_Document.LoadXml(xmlDataFetchActivity7Params);
            _flow.DataFetchActivity7.QueryParameters = DataFetchActivity7_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("Cambiar Texto_InputPropertiesOutputProperties_1!MainDetails", _flow.DataFetchActivity7);
            this.Activities.Add (_flow.DataFetchActivity7);
            _flow.StartActivity1.Comment = @"";
            _flow.StartActivity1.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.StartActivity1.Name = @"Start";
            _flow.StartActivity1.JVM = new HP.ST.Ext.BasicActivities.JVMProperties();
            _flow.StartActivity1.IsJavaUsed = false;
            _flow.StartActivity1.JVM.Classpath = @"%CLASSPATH%";
            _flow.StartActivity1.JVM.AdditionalVMParameters = @"";
            _flow.StartActivity1.JMS = new HP.ST.Ext.BasicActivities.JMSProperties();
            _flow.StartActivity1.IsJmsUsed = false;
            _flow.StartActivity1.JMS.JNDIContextFactory = @"<Select...>";
            _flow.StartActivity1.JMS.JNDIProviderUrl = @"";
            _flow.StartActivity1.JMS.JMSConnectionFactory = @"";
            _flow.StartActivity1.JMS.SecurityPrincipal = @"";
            _flow.StartActivity1.JMS.SecurityCredentials = @"";
            _flow.StartActivity1.JMS.ConnectionsPerProcess = @"1";
            _flow.StartActivity1.JMS.TimeoutOptions = @"DN_User_defined_Timeout";
            _flow.StartActivity1.JMS.UserTimeout = @"20";
            _flow.StartActivity1.JMS.GenerateAutoSelector = @"No";
            this.Activities.Add (_flow.StartActivity1);
            _flow.Loop2.ConditionAsString = @"For each item in {DataSource.Cambiar Texto_InputPropertiesOutputProperties_1!MainDetails}";
            _flow.Loop2.NumberOfIterations = (int)1;
            _flow.Loop2.Condition += delegate(object sender,STActivityBaseEventArgs e)
            {
            return !DataCursorActivity14.IsAtEndPosition;
            };
            _flow.Loop2.Comment = @"";
            _flow.Loop2.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop2.Name = @"Test Flow";
            _flow.Loop2.Activities.Add (this.DataCursorActivity14);
            _flow.Loop2.Activities.Add (_flow.RelatedDataFetchActivity15);
            _flow.Loop2.Activities.Add (_flow.Sequence6);
            this.Activities.Add (_flow.Loop2);
            _flow.DataExporterActivity9.Comment = @"";
            _flow.DataExporterActivity9.IconPath = @"";
            VTDPropertyInfoBase pi3 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter2 = new VTDObjectGetter(pi3);
            VTDPropertyInfoBase pi4 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter2 = new VTDObjectSetter(pi4);
            binding_setter2 = new StringFormaterDecorator(binding_setter2,"{Step.DataFetchActivity7.OutTable}");
            bind_dir2 = new BindDirection(_flow.DataFetchActivity7,binding_getter2,binding_setter2,BindTargetType.ToInProperty);
            _flow.DataExporterActivity9.InDirections.Add(bind_dir2);
            this.Activities.Add (_flow.DataExporterActivity9);
            _flow.DataExporterActivity12.Comment = @"";
            _flow.DataExporterActivity12.IconPath = @"";
            VTDPropertyInfoBase pi5 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter3 = new VTDObjectGetter(pi5);
            VTDPropertyInfoBase pi6 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter3 = new VTDObjectSetter(pi6);
            binding_setter3 = new StringFormaterDecorator(binding_setter3,"{Step.DataFetchActivity10.OutTable}");
            bind_dir3 = new BindDirection(_flow.DataFetchActivity10,binding_getter3,binding_setter3,BindTargetType.ToInProperty);
            _flow.DataExporterActivity12.InDirections.Add(bind_dir3);
            this.Activities.Add (_flow.DataExporterActivity12);
            _flow.DataExporterCloseActivity13.Comment = @"";
            _flow.DataExporterCloseActivity13.IconPath = @"";
            this.Activities.Add (_flow.DataExporterCloseActivity13);
            _flow.EndActivity3.Comment = @"";
            _flow.EndActivity3.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.EndActivity3.Name = @"End";
            this.Activities.Add (_flow.EndActivity3);
            _flow.DataDisconnectActivity8.Comment = @"";
            _flow.DataDisconnectActivity8.IconPath = @"";
            VTDPropertyInfoBase pi7 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter4 = new VTDObjectGetter(pi7);
            VTDPropertyInfoBase pi8 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter4 = new VTDObjectSetter(pi8);
            binding_setter4 = new StringFormaterDecorator(binding_setter4,"{Step.DataFetchActivity7.OutTable}");
            bind_dir4 = new BindDirection(_flow.DataFetchActivity7,binding_getter4,binding_setter4,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity8.InDirections.Add(bind_dir4);
            this.Activities.Add (_flow.DataDisconnectActivity8);
            _flow.DataDisconnectActivity11.Comment = @"";
            _flow.DataDisconnectActivity11.IconPath = @"";
            VTDPropertyInfoBase pi9 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter5 = new VTDObjectGetter(pi9);
            VTDPropertyInfoBase pi10 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter5 = new VTDObjectSetter(pi10);
            binding_setter5 = new StringFormaterDecorator(binding_setter5,"{Step.DataFetchActivity10.OutTable}");
            bind_dir5 = new BindDirection(_flow.DataFetchActivity10,binding_getter5,binding_setter5,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity11.InDirections.Add(bind_dir5);
            this.Activities.Add (_flow.DataDisconnectActivity11);
            this.DataCursorActivity14.Comment = @"";
            this.DataCursorActivity14.IconPath = @"";
            VTDPropertyInfoBase pi11 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter6 = new VTDObjectGetter(pi11);
            VTDPropertyInfoBase pi12 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter6 = new VTDObjectSetter(pi12);
            binding_setter6 = new StringFormaterDecorator(binding_setter6,"{Step.DataFetchActivity7.OutTable}");
            bind_dir6 = new BindDirection(_flow.DataFetchActivity7,binding_getter6,binding_setter6,BindTargetType.ToInProperty);
            this.DataCursorActivity14.InDirections.Add(bind_dir6);
            this.DataCursorActivity14_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity14_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity14_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity14_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity14_Policy.StartCondition.Value = "";
            this.DataCursorActivity14_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity14_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity14_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity14_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity14_Policy.EndCondition.Value = "";
            this.DataCursorActivity14_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity14_Policy.StepSize = 1;
            this.DataCursorActivity14_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity14.Policy = this.DataCursorActivity14_Policy;
            this.DataCursorActivity14.ReportStepData = true;
            _flow.Loop2.BeforeExecuteStepEvent += this.DataCursorActivity14.ResetCursor;
            XmlDocument RelatedDataFetchActivity15_Relations_Document = new XmlDocument();
            RelatedDataFetchActivity15_Relations_Document.PreserveWhitespace = true;
            RelatedDataFetchActivity15_Relations_Document.LoadXml(
            @"<RelationsContainer><Relation><PrimaryQuery>025b403c-788c-49e8-9b72-fa7da23c772d</PrimaryQuery><RelatedQuery>33f9fef4-2191-4419-a8fe-47c2a6aa8713</RelatedQuery><PrimaryKey>MainDetailsKey</PrimaryKey><ForeignKey>MainDetailsKey</ForeignKey></Relation></RelationsContainer>");
            _flow.RelatedDataFetchActivity15.Relations = RelatedDataFetchActivity15_Relations_Document;
            string xmlRelatedDataFetchActivity15Params = @"<QueriesContainer><Query><AssemblyPath>C:\Program Files (x86)\HPE\Unified Functional Testing\AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll</AssemblyPath><QueryClassName>HP.ST.Ext.CustomDataProviders.ExcelFileDataQuery</QueryClassName><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>025b403c-788c-49e8-9b72-fa7da23c772d</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>Cambiar Texto_InputPropertiesOutputProperties_1!MainDetails</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value>Cambiar Texto_InputPropertiesOutputProperties_1</Value></QueryParameter><QueryParameter><Name>FilePath</Name><Value>" + _context.ResourceManager.GetValue("{Cambiar Texto_InputPropertiesOutputProperties_1!MainDetails.TablePath}") + @"</Value></QueryParameter><QueryParameter><Name>SheetName</Name><Value>MainDetails$</Value></QueryParameter><QueryParameter><Name>ContainsHeadersRow</Name><Value>True</Value></QueryParameter></QueryParametersContainer></Query><Query><AssemblyPath>C:\Program Files (x86)\HPE\Unified Functional Testing\AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll</AssemblyPath><QueryClassName>HP.ST.Ext.CustomDataProviders.ExcelFileDataQuery</QueryClassName><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>33f9fef4-2191-4419-a8fe-47c2a6aa8713</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>Cambiar Texto_InputPropertiesOutputProperties_1!SearchReplaceString</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value>Cambiar Texto_InputPropertiesOutputProperties_1</Value></QueryParameter><QueryParameter><Name>FilePath</Name><Value>" + _context.ResourceManager.GetValue("{Cambiar Texto_InputPropertiesOutputProperties_1!SearchReplaceString.TablePath}") + @"</Value></QueryParameter><QueryParameter><Name>SheetName</Name><Value>SearchReplaceString$</Value></QueryParameter><QueryParameter><Name>ContainsHeadersRow</Name><Value>True</Value></QueryParameter></QueryParametersContainer></Query></QueriesContainer>";
            XmlDocument RelatedDataFetchActivity15_Queries_Document = new XmlDocument();
            RelatedDataFetchActivity15_Queries_Document.PreserveWhitespace = true;
            RelatedDataFetchActivity15_Queries_Document.LoadXml(xmlRelatedDataFetchActivity15Params);
            _flow.RelatedDataFetchActivity15.Queries = RelatedDataFetchActivity15_Queries_Document;
            VTDPropertyInfoBase pi13 = new VTDPropertyInfoBase("MainDetailsKey");
            VTDBaseGetter binding_getter7 = new VTDObjectGetter(pi13);
            VTDPropertyInfoBase pi14 = new VTDPropertyInfoBase("025b403c-788c-49e8-9b72-fa7da23c772d_MainDetailsKey");
            VTDBaseSetter binding_setter7 = new VTDObjectSetter(pi14);
            bind_dir7 = new BindDirection(this.DataCursorActivity14,binding_getter7,binding_setter7,BindTargetType.ToInProperty);
            _flow.RelatedDataFetchActivity15.InDirections.Add(bind_dir7);
            _flow.Sequence6.Comment = @"";
            _flow.Sequence6.IconPath = @"";
            _flow.Sequence6.Name = @"Sequence6";
            _flow.Sequence6.Activities.Add (_flow.ReplaceStringActivity4);
            _flow.Sequence6.Activities.Add (_flow.ConcatenateStringsActivity5);
            _flow.ReplaceStringActivity4.SourceString = @"{DataSource.Cambiar Texto_InputPropertiesOutputProperties_1!MainDetails.SourceString}";
            _flow.ReplaceStringActivity4.SearchReplaceString = new Pair<string, string>[1];
            _flow.ReplaceStringActivity4.SearchReplaceString[0] = new Pair<string, string>();
            _flow.ReplaceStringActivity4.SearchReplaceString[0].Key = @"{DataSource.Cambiar Texto_InputPropertiesOutputProperties_1!SearchReplaceString.Key}";
            _flow.ReplaceStringActivity4.SearchReplaceString[0].Value = @"{DataSource.Cambiar Texto_InputPropertiesOutputProperties_1!SearchReplaceString.Value}";
            _flow.ReplaceStringActivity4.CaseSensitive = false;
            _flow.ReplaceStringActivity4.Comment = @"";
            _flow.ReplaceStringActivity4.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_replace_string.png";
            _flow.ReplaceStringActivity4.Name = @"Cambiar Texto";
            VTDPropertyInfoBase pi15 = new VTDPropertyInfoBase("SourceString");
            VTDBaseGetter binding_getter8 = new VTDObjectGetter(pi15);
            VTDPropertyInfoBase pi16 = new VTDPropertyInfoBase("SourceString");
            VTDBaseSetter binding_setter8 = new VTDObjectSetter(pi16);
            binding_setter8 = new StringFormaterDecorator(binding_setter8,"{DataSource.Cambiar Texto_InputPropertiesOutputProperties_1!MainDetails.SourceString}");
            bind_dir8 = new BindDirection(this.DataCursorActivity14,binding_getter8,binding_setter8,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity4.InDirections.Add(bind_dir8);
            VTDPropertyInfoBase pi17 = new VTDPropertyInfoBase("CaseSensitive");
            VTDBaseGetter binding_getter9 = new VTDObjectGetter(pi17);
            VTDPropertyInfoBase pi18 = new VTDPropertyInfoBase("CaseSensitive");
            VTDBaseSetter binding_setter9 = new VTDObjectSetter(pi18);
            bind_dir9 = new BindDirection(this.DataCursorActivity14,binding_getter9,binding_setter9,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity4.InDirections.Add(bind_dir9);
            List<DataLink> ReplaceStringActivity4_InputProperties_relatedDataLinks = new List<DataLink>();
            ReplaceStringActivity4_InputProperties_relatedDataLinks.Add(new DataLink("33f9fef4-2191-4419-a8fe-47c2a6aa8713", "Value", "/Arguments[1]/SearchReplaceString[1]/SearchReplaceString[1][1]/Value[1]"));
            ReplaceStringActivity4_InputProperties_relatedDataLinks.Add(new DataLink("33f9fef4-2191-4419-a8fe-47c2a6aa8713", "Key", "/Arguments[1]/SearchReplaceString[1]/SearchReplaceString[1][1]/Key[1]"));
            string ReplaceStringActivity4_InputProperties_schema = @"<?xml version=""1.0"" encoding=""utf-16""?>
            <xs:schema xmlns:types=""http://hp.vtd.schemas/types/v1.0"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"">
              <xs:import schemaLocation=""../../../dat/schemas/Types.xsd"" namespace=""http://hp.vtd.schemas/types/v1.0"" />
              <xs:element types:displayName=""Properties"" name=""Arguments"">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element types:displayName=""Source string"" name=""SourceString"" type=""xs:string"" />
                    <xs:element types:displayCollectionName=""Search and Replace"" types:displayName=""Search and Replace Strings"" types:serialize=""none"" types:visible=""true"" types:argType=""xml"" minOccurs=""1"" maxOccurs=""unbounded"" name=""SearchReplaceString"">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element types:displayName=""Search string"" name=""Key"" type=""xs:string"" />
                          <xs:element types:displayName=""Replace string"" name=""Value"" type=""xs:string"" />
                        </xs:sequence>
                      </xs:complexType>
                    </xs:element>
                    <xs:element types:displayName=""Case-sensitive"" default=""true"" name=""CaseSensitive"" type=""xs:boolean"">
                      <xs:annotation>
                        <xs:documentation>An indicator denoting if the search string is case-sensitive</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
            </xs:schema>";
            VTDPropertyInfoBase pi19 = new VTDPropertyInfoBase("Value");
            VTDPropertyInfoBase pi20 = new VTDPropertyInfoBase("SearchReplaceString[0].Value");
            VTDBaseGetter binding_getter10 = new VTDObjectGetter(pi19);
            VTDBaseSetter binding_setter10 = new VTDDataSourceObjectSetter(pi20,ReplaceStringActivity4_InputProperties_schema,Path.Combine(_context.ScriptPath, @"Schemas"),ReplaceStringActivity4_InputProperties_relatedDataLinks);
            bind_dir10 = new BindDirection(_flow.RelatedDataFetchActivity15,binding_getter10,binding_setter10,BindTargetType.ToInProperty);
            _flow.ReplaceStringActivity4.InDirections.Add(bind_dir10);
            VTDPropertyInfoBase pi21 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter11 = new VTDObjectGetter(pi21);
            VTDPropertyInfoBase pi22 = new VTDPropertyInfoBase("Result");
            VTDBaseSetter binding_setter11 = new VTDCheckpointSetter(XmlTypeCode.String);
            binding_setter11 = new StringFormaterDecorator(binding_setter11,"{DataSource.Cambiar Texto_InputPropertiesOutputProperties_1!MainDetails.Result}");
            bind_dir11 = new BindDirection(this.DataCursorActivity14,binding_getter11,binding_setter11,BindTargetType.ToInProperty);
            set_ReplaceStringActivity4_checkpoints(_flow.ReplaceStringActivity4);
            _flow.ConcatenateStringsActivity5.Prefix = @"{DataSource.Cambiar Texto_InputPropertiesOutputProperties_1!MainDetails.SourceString}";
            _flow.ConcatenateStringsActivity5.Suffix = @" was replaced with {DataSource.Cambiar Texto_InputPropertiesOutputProperties_1!MainDetails.Result}";
            _flow.ConcatenateStringsActivity5.Comment = @"";
            _flow.ConcatenateStringsActivity5.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_concat.png";
            _flow.ConcatenateStringsActivity5.Name = @"Concatenar Texto";
            VTDPropertyInfoBase pi23 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter12 = new VTDObjectGetter(pi23);
            VTDPropertyInfoBase pi24 = new VTDPropertyInfoBase("Suffix");
            VTDBaseSetter binding_setter12 = new VTDObjectSetter(pi24);
            binding_setter12 = new StringFormaterDecorator(binding_setter12,"{DataSource.Cambiar Texto_InputPropertiesOutputProperties_1!MainDetails.Result}");
            bind_dir12 = new BindDirection(this.DataCursorActivity14,binding_getter12,binding_setter12,BindTargetType.ToInProperty);
            _flow.ConcatenateStringsActivity5.InDirections.Add(bind_dir12);
            VTDPropertyInfoBase pi25 = new VTDPropertyInfoBase("SourceString");
            VTDBaseGetter binding_getter13 = new VTDObjectGetter(pi25);
            VTDPropertyInfoBase pi26 = new VTDPropertyInfoBase("Prefix");
            VTDBaseSetter binding_setter13 = new VTDObjectSetter(pi26);
            binding_setter13 = new StringFormaterDecorator(binding_setter13,"{DataSource.Cambiar Texto_InputPropertiesOutputProperties_1!MainDetails.SourceString}");
            bind_dir13 = new BindDirection(this.DataCursorActivity14,binding_getter13,binding_setter13,BindTargetType.ToInProperty);
            _flow.ConcatenateStringsActivity5.InDirections.Add(bind_dir13);
            VTDPropertyInfoBase pi27 = new VTDPropertyInfoBase("SourceString");
            VTDBaseGetter binding_getter14 = new VTDObjectGetter(pi27);
            VTDPropertyInfoBase pi28 = new VTDPropertyInfoBase("Result");
            VTDBaseSetter binding_setter14 = new VTDCheckpointSetter(XmlTypeCode.String);
            binding_setter14 = new StringFormaterDecorator(binding_setter14,"{DataSource.Cambiar Texto_InputPropertiesOutputProperties_1!MainDetails.SourceString}");
            bind_dir14 = new BindDirection(this.DataCursorActivity14,binding_getter14,binding_setter14,BindTargetType.ToInProperty);
            VTDPropertyInfoBase pi29 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter15 = new VTDObjectGetter(pi29);
            VTDPropertyInfoBase pi30 = new VTDPropertyInfoBase("Result");
            VTDBaseSetter binding_setter15 = new VTDCheckpointSetter(XmlTypeCode.String);
            binding_setter15 = new StringFormaterDecorator(binding_setter15,"{DataSource.Cambiar Texto_InputPropertiesOutputProperties_1!MainDetails.Result}");
            bind_dir15 = new BindDirection(this.DataCursorActivity14,binding_getter15,binding_setter15,BindTargetType.ToInProperty);
            set_ConcatenateStringsActivity5_checkpoints(_flow.ConcatenateStringsActivity5);
            
        }
        
        internal void InitializeEncryptionManagerValues()
        {
        
        }
        	
    	bool useReport = true;
    
    	protected override STExecutionResult ExecuteStep()
        {
            return base.ExecuteStep();
        }
    
        public void Start()
        {
    	    try
    		{
    		  Workflow_Executing();
    		  this.ExecuteStep();
    		}
    		finally
    		{
    		  WorkFlowScript_Completed();
    		}
        }
    
    	private void InitReport()
    	{
    		if (useReport)
    		{	
    			// Intialize Reporter
    			string reportDBDir = Path.Combine(this._context.ReportDirectory, @"Report");
    			CleanupReport(reportDBDir);        	
    			string reportDBPath = Path.Combine(reportDBDir, "VTDReport.mdb");        	
    			if (reporter == null)
    			{
    				reporter = new Reporter(reportDBPath);
    			}
    			_context.Reporter = reporter;
    		}
    	}
    
        public static void CopyDirectory(string Src, string Dst)
        {
            String[] Files;
    
            if (Dst[Dst.Length - 1] != Path.DirectorySeparatorChar)
                Dst += Path.DirectorySeparatorChar;
            if (!Directory.Exists(Dst)) Directory.CreateDirectory(Dst);
            Files = Directory.GetFileSystemEntries(Src);
            foreach (string Element in Files)
            {
                // Sub directories
                if (Directory.Exists(Element))
                    CopyDirectory(Element, Dst + Path.GetFileName(Element));
                // Files in directory
                else
                    File.Copy(Element, Dst + Path.GetFileName(Element), true);
            }
        }
        
        private void CleanupReport(string reportDBDir)
        {   
    		if (useReport)
    		{             
    			string reportTemplateDir = Path.Combine(ServiceTestRunner.GetInstallPath(),@"bin\ReportResources");                
    			try
    			{
            		CopyDirectory(reportTemplateDir, reportDBDir);
    			}
    			catch //(Exception ex)
    			{
    				//ToDo: LoggingService.Warn("Report Cleanup Error", ex);
    			}
    		}
        }
    
        void Workflow_Executing()
        {   
        	InitReportNode();
                       
        }
    
    	private void InitReportNode()
    	{
    		if (useReport)
    		{	
        		// Init report creator
    			this.reportCreator = new HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator();
    			this.reportLevelInTree = reportCreator.Init(_context.EnvironmentProfile.GetVariableValue("TestName"), _context);
                
    			STActivityBase activity = this;
    			string workflowID = activity.GetHashCode().ToString();
    			ReportNodeCreationData newNodeData =
    			new ReportNodeCreationData(workflowID, workflowID, DateTime.Now);
    			reporter.CreateReportNode(newNodeData);
            
    			ReportInfoData newReportData = new ReportInfoData(workflowID, ReportKeywords.TypeKeywordTag, this.GetType().ToString());
    			reporter.SendReportData(newReportData);
    			newReportData = new ReportInfoData(workflowID, ReportKeywords.NameKeywordTag, this.Name);
    			//TrackData(ReportInfoData.InfoDataTag, newReportData);
    			reporter.SendReportData(newReportData);            
            }
    	}
        
        void WorkFlowScript_Completed()
        {   
    		
    
    		CreateReportFiles();
    					
        	// Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
    
    		OnExecutionCompleted();
    		
        }
    
    	private void CreateReportFiles()
    	{
    		if (useReport)
    		{	
    			//Dispose reporter inorder to close connection to report DB
           		this._context.Reporter.Dispose();
            	
           		// Run report creator
    			reportCreator.RunOnDBAndCreateFiles();
    		}
    	}
    
        
        void Workflow_Faulting()
        {
    		
    
    		CreateReportFiles();
            // Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
           
    		OnExecutionCompleted();
        }
    
    	protected override QcSystemVariables GetRuntimeQcVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeQcVariables(this._context);
    	}
            
    	protected override TestSystemVariables GetTestSystemVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeTestVariables(this._context);
    	}
    
    	private void UpdateTestSettings(ISTRunTimeContext ctx)
        {
    		ctx.PropertyBag["StopTestOnStepFailure"] = true;
    	}
    }
    
    public partial class VuserClass
    {
    	public static string[] CommandLineArguments;
    	public static string[] DotNetResolverPaths;
    	
        public VuserClass()
        {
    				
    		AssemblyResolver.AddSTPathsToResolutionPaths();
    		AssemblyResolver.AttachToAppdomain();
        }
    
        private void AddAssemblyResolver()
        {
    		AssemblyResolver.AddTestPathToResolutionPaths(GetTestPath());
    		AssemblyResolver.AddPathsForAssemblyResolution(DotNetResolverPaths);
        }
    	
        public int STAction()
        {	
            AddAssemblyResolver();
            STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
            WorkFlowScript script = new WorkFlowScript(ctx);
            script.InitializeComponent();
            script.Start();       
            
            return 0;
        }
        
        public void NotifyLicenseException(string msg)
        {
        		
    		try
    		{
    		    STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
                WorkFlowScript script = new WorkFlowScript(ctx);
                script.InitializeComponent();
                script.Context.ReplayClient.OnLicenseFailure(msg);
                
            }
            catch (Exception)
            {
    			// ToDo: log the error message
            }        
        }
    
    	 protected string GetTestPath()
            {
                if (CommandLineArguments != null)
                {
                    for (int i = 0; i < CommandLineArguments.Length; i++)
                    {
                        if (CommandLineArguments[i].Equals("-test", StringComparison.OrdinalIgnoreCase))
                        {
                            return CommandLineArguments[i + 1];
                        }
                    }
                }
                return String.Empty;
            }
        
    }
    
    }
    