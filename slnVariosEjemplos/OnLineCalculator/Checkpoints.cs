//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Script
{
    using System;
    using System.Xml;
    using System.Xml.Schema;
    using System.Collections.Generic;
    using HP.ST.Fwk.RunTimeFWK;
    using HP.ST.Fwk.RunTimeFWK.CheckpointFWK;
    using HP.ST.Fwk.RunTimeFWK.Utilities;
    using HP.ST.Ext.CheckpointLogicOperators;
    using HP.ST.Ext.BindingImpl.Getters;
    using HP.ST.Ext.BindingImpl.Setters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Getters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Setters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.PropInfo;
    using HP.ST.Ext.CheckpointRules;
    using HP.ST.Ext.CheckpointRules.ArrayCheckpoints;
    
    
    public partial class WorkFlowScript
    {
        
        private void set_StServiceCallActivity4_checkpoints(STActivityBase activity)
        {
            VTDPropertyInfoBase stracturalOutputEnvelope = new VTDPropertyInfoBase("OutputEnvelope", "/*[local-name(.)=\'Envelope\'][1]");
            IList<VTDPropertyInfoBase> stracturalPropsInfo = new List<VTDPropertyInfoBase>();
            CpValObj ExpectedSchema = new CpValObj("<?xml version=\"1.0\" encoding=\"utf-16\"?><xs:schema xmlns=\"http://schemas.xmlsoap.o" +
                    "rg/soap/envelope/\" xmlns:vtd=\"hp.visual_test_designer\" elementFormDefault=\"quali" +
                    "fied\" targetNamespace=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xs=\"http" +
                    "://www.w3.org/2001/XMLSchema\"><xs:import schemaLocation=\"EmbeddedResources/calcu" +
                    "lator\\webServices\\calculator\\_1.xsd\" namespace=\"http://tempuri.org/\" /><xs:attri" +
                    "bute name=\"fullName\" type=\"xs:string\" /><xs:attribute name=\"group\" type=\"xs:stri" +
                    "ng\" /><xs:attribute name=\"serialize\" type=\"xs:string\" /><xs:attribute name=\"argT" +
                    "ype\" type=\"xs:string\" /><xs:element name=\"Envelope\" type=\"Envelope\" /><xs:comple" +
                    "xType name=\"Envelope\"><xs:sequence><xs:element minOccurs=\"0\" ref=\"Header\" /><xs:" +
                    "element minOccurs=\"1\" ref=\"Body\" /></xs:sequence><xs:anyAttribute processContent" +
                    "s=\"lax\" /></xs:complexType><xs:element name=\"Header\" type=\"Header\" /><xs:complex" +
                    "Type name=\"Header\"><xs:sequence xmlns=\"\"><xs:any minOccurs=\"0\" maxOccurs=\"unboun" +
                    "ded\" processContents=\"lax\" /></xs:sequence><xs:anyAttribute processContents=\"lax" +
                    "\" /></xs:complexType><xs:element name=\"Body\" type=\"Body\" /><xs:complexType name=" +
                    "\"Body\"><xs:sequence xmlns=\"\"><xs:element xmlns:q1=\"http://tempuri.org/\" ref=\"q1:" +
                    "AddResponse\" /></xs:sequence><xs:anyAttribute namespace=\"##any\" processContents=" +
                    "\"lax\"><xs:annotation><xs:documentation>Prose in the spec does not specify that a" +
                    "ttributes are allowed on the Body element</xs:documentation></xs:annotation></xs" +
                    ":anyAttribute></xs:complexType><xs:attribute name=\"mustUnderstand\"><xs:simpleTyp" +
                    "e><xs:restriction base=\"xs:boolean\"><xs:pattern value=\"0|1\" /></xs:restriction><" +
                    "/xs:simpleType></xs:attribute><xs:attribute name=\"actor\" type=\"xs:anyURI\" /><xs:" +
                    "simpleType name=\"encodingStyle\"><xs:annotation><xs:documentation>\'encodingStyle\'" +
                    " indicates any canonicalization conventions followed in the contents of the cont" +
                    "aining element.  For example, the value \'http://schemas.xmlsoap.org/soap/encodin" +
                    "g/\' indicates the pattern described in SOAP specification</xs:documentation></xs" +
                    ":annotation><xs:list itemType=\"xs:anyURI\" /></xs:simpleType><xs:attribute name=\"" +
                    "encodingStyle\" type=\"encodingStyle\" /><xs:attributeGroup name=\"encodingStyle\"><x" +
                    "s:attribute ref=\"encodingStyle\" /></xs:attributeGroup><xs:element name=\"Fault\" t" +
                    "ype=\"Fault\" /><xs:complexType name=\"Fault\" final=\"extension\"><xs:annotation><xs:" +
                    "documentation>Fault reporting structure</xs:documentation></xs:annotation><xs:se" +
                    "quence><xs:element name=\"faultcode\" type=\"xs:QName\" /><xs:element name=\"faultstr" +
                    "ing\" type=\"xs:string\" /><xs:element minOccurs=\"0\" name=\"faultactor\" type=\"xs:any" +
                    "URI\" /><xs:element minOccurs=\"0\" name=\"detail\" type=\"detail\" /></xs:sequence></x" +
                    "s:complexType><xs:complexType name=\"detail\"><xs:sequence><xs:any minOccurs=\"0\" m" +
                    "axOccurs=\"unbounded\" namespace=\"##any\" processContents=\"lax\" /></xs:sequence><xs" +
                    ":anyAttribute namespace=\"##any\" processContents=\"lax\" /></xs:complexType></xs:sc" +
                    "hema>", XmlTypeCode.None);
            stracturalPropsInfo.Add(stracturalOutputEnvelope);
            BaseCPRule StracturalRule = new StracturalRule(activity, ExpectedSchema, stracturalPropsInfo);
            activity.AddCheckpointRule(StracturalRule);

            // Checkpoint 2
            IVTDGetter actualValueGetter2 = new VTDXPathGetter(new VTDPropertyInfoBase("OutputEnvelope", "/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='AddResponse'][1]/*[local-name(.)='AddResult'][1]"), XmlTypeCode.Int, false);
            IVTDSetter actualValueSetter2 = new VTDCheckpointSetter(XmlTypeCode.Int);
            BindDirection actualBindDirection2 = new BindDirection(_flow.StServiceCallActivity4, actualValueGetter2, actualValueSetter2);
            CpValObj valueActualObject2 = new CpValObj(actualBindDirection2, XmlTypeCode.Int, false);
            CpValObj valueExpectedObject2 = new CpValObj("17", XmlTypeCode.Int);
            ValueCPRule cpRule2 = new ValueCPRule(valueActualObject2, valueExpectedObject2, PrimitiveTypeCP.EqualTo, "=", false);
            activity.AddCheckpointRule(cpRule2);

        }
        
        private void set_ValidateXmlActivityRun11_checkpoints(STActivityBase activity)
        {
            // Checkpoint 1
            IVTDGetter actualValueGetter1 = new VTDXPathGetter(new VTDPropertyInfoBase("OutputProperties", "/*[local-name(.)='Arguments'][1]/*[local-name(.)='Result'][1]/*[local-name(.)='Valid'][1]"), XmlTypeCode.Boolean, false);
            IVTDSetter actualValueSetter1 = new VTDCheckpointSetter(XmlTypeCode.Boolean);
            BindDirection actualBindDirection1 = new BindDirection(_flow.ValidateXmlActivityRun11, actualValueGetter1, actualValueSetter1);
            CpValObj valueActualObject1 = new CpValObj(actualBindDirection1, XmlTypeCode.Boolean, false);
            CpValObj valueExpectedObject1 = new CpValObj("true", XmlTypeCode.Boolean);
            ValueCPRule cpRule1 = new ValueCPRule(valueActualObject1, valueExpectedObject1, PrimitiveTypeCP.EqualTo, "=", false);
            activity.AddCheckpointRule(cpRule1);

        }
    }
}
